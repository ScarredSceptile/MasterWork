@page "/register"
@using MasterRankingWebApp.Data;
@using System.Text;
@using Newtonsoft.Json;
@inject NavigationManager NavManager
@inject IHttpClientFactory ClientFactory
@inject User.UserContainer user

<PageTitle>Register</PageTitle>


<EditForm Model="@loginDetails" OnSubmit="@UserRegister">
    <div class="form-group row">
        <label for="Name" class="col-sm-2 control-label">Name</label>
        <div class="col-sm-10">
            <InputText id="Name" @bind-Value="loginDetails.UserName" DisplayName="UserName" />
            <ValidationMessage For="@(() => loginDetails.UserName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Email" class="col-sm-2 control-label">Password</label>
        <div class="col-sm-10">
            <InputText type="password" @bind-Value="loginDetails.Password" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-offset-2 col-sm-10">
            <button type="submit" class="btn btn-default">Register</button>
        </div>
    </div>
</EditForm>


@if (error)
{
    <p style="color: red">User with name @oldUsername already exist!</p>
}


@code {
    private LoginDetails loginDetails = new();
    private bool error = false;
    private string oldUsername = "";

    private async void UserRegister()
    {
        var request = new HttpRequestMessage(HttpMethod.Post, "http://10.212.171.207:44315/api/Login/register");

        request.Content = new StringContent(JsonConvert.SerializeObject(loginDetails), Encoding.UTF8, "application/json");
        var client = ClientFactory.CreateClient();
        using var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStringAsync();
            user.SetValue(JsonConvert.DeserializeObject<Appdata>(responseStream));

            NavManager.NavigateTo("/");
        }
        else
        {
            error = true;
            oldUsername = loginDetails.UserName;
            StateHasChanged();
        }
    }
}
